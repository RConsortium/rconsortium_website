{
  "hash": "fd2080953668d92741d69cd8b6f91d72",
  "result": {
    "markdown": "---\ntitle: \"A unifying toolbox for handling persistence data\"\nauthor: \"Aymeric Stamm, Jason Cory Brunson\"\nformat: html\ndate: \"05/16/2025\"\nimage: \"phutil-main-image.png\"\nbibliography: references.bib\n---\n\n\n## Topological data analysis in R\n\nTopological data analysis (TDA) is a rapidly growing field that uses techniques\nfrom algebraic topology to analyze the shape and structure of data. At its core,\nTDA provides tools to understand the geometric and topological features of\ndatasets across multiple scales, with persistent homology (PH) being one of its\nfundamental techniques.\n\nSeveral R packages have emerged to provide TDA capabilities to the R community,\nincluding:\n\n-   [{TDA}](https://cran.r-project.org/package=TDA) which focuses on statistical\nanalysis of PH and density clustering by providing an R interface for the\nefficient algorithms of the C++ libraries\n[GUDHI](https://project.inria.fr/gudhi/software/),\n[Dionysus](https://www.mrzv.org/software/dionysus/) and\n[PHAT](https://bitbucket.org/phat-code/phat/). This package also implements\nmethods from @fasy2014confidence and @chazal2014stochastic for analyzing the\nstatistical significance of PH features.\n-   [{TDAstats}](https://cran.r-project.org/package=TDAstats) which provides a\ncomprehensive toolset for conducting TDA, specifically via the calculation of PH\nin a Vietoris-Rips complex [@wadhwa2018tdastats].\n-   [{ripserr}](https://cran.r-project.org/package=ripserr) which provides an R\ninterface to the [Ripser](https://github.com/Ripser/ripser) and [Cubical Ripser](https://github.com/CubicalRipser) C++ libraries [@bauer2021ripser; @kaji2020cubical].\n-   [{TDAkit}](https://cran.r-project.org/package=TDAkit) which provides a\nvariety of algorithms to learn with PH of the data based on functional summaries\nfor clustering, hypothesis testing, and visualization\n[@wasserman2018topological].\n-   Other packages that have been archived due to lack of maintenance (e.g.\n[{kernelTDA}](https://cran.r-project.org/package=kernelTDA)).\n\nWhile these packages have made TDA more accessible, they've also introduced\ndifferent data structures for representing persistence data, creating challenges\nfor interoperability and workflow consistency. Moreover, workflows using tools\nfrom different packages will rely on some of the same low-level operations, like\ncomputing PH and calculating distances between persistence diagrams. When each\npackage is built for purpose, this will lead to either duplication or cascading\ndependencies.\n\nThe [{phutil}](https://tdaverse.github.io/phutil/) package addresses such\nfragmentation by providing a unified toolbox for handling persistence data. It\noffers consistent data structures and methods that work seamlessly with outputs\nfrom various TDA packages. As part of the\n[TDAverse](https://github.com/tdaverse) initiative, {phutil} contributes to\ncreating a coherent ecosystem for topological data analysis in R.\n\n## Minimal mathematical background\n\n### Persistent homology\n\nThe {phutil}\n[documentation](https://tdaverse.github.io/phutil/articles/validation-benchmark.html#definitions)\nprovides an overview of persistent homology. For now, know that the result of\nthis procedure is a **persistence diagram**: a multiset (set with multiplicity)\nof points in the plane---usually the upper-half plane and most often the first\nquadrant. Persistence diagrams encode topological features of different\ndimensions, and a single diagram may encode features of one or all dimensions.\nBy **persistence data**, we mean a data structure that encodes diagrams of all\ndimensions, and possibly many diagrams coming from data sets of a common type.\n\n### Distances between persistence diagrams\n\nTwo persistence diagrams $X$ and $Y$ are canonically compared using\n**Wasserstein distances**.\nThese are a family of metrics determined by a $q$-Minkowski distance on the plane\nand a $p$-norm on the distances between pairs of points matched via some $\\varphi : X \\to Y$:\n\n$$ \\left( \\sum_{x \\in X}{{\\lVert\nx-\\varphi(x) \\rVert_q}^p} \\right)^{1/p} $$\n\nThe distance $W_p^q(X,Y)$ is defined to be the infimum of this expression over all possible matchings.\nSee the\n[vignette](https://tdaverse.github.io/phutil/articles/validation-benchmark.html)\non distances for more detail, or @cohen2010lipschitz and @bubenik2023exact for\ndetailed treatments and stability results on these families of metrics.\n\n## Implementations in {phutil}\n\nThe {phutil} package aims at serving as a low-level package that defines a\nunifying toolbox for handling persistence data. This section describes the\nclass that has been implemented to handle a single persistence diagram as\nwell as the distances between persistence diagrams. The package also provides\na class of persistence data that can be used to store multiple diagrams, which\nis simply a list of persistence diagrams. This class is not described here, but\nwill be the backbone of the forthcoming {inphr} package for making inference on\npersistence diagrams.\n\n### The [`persistence`](https://tdaverse.github.io/phutil/reference/persistence.html) class\n\nThe 'persistence' class is a list with the following components:\n\n-   `pairs`: A list of 2-column matrices containing birth-death pairs. The\n$i$-*th* element of the list corresponds to the $(i-1)$-*th* homology dimension.\nIf there is no pairs for a given dimension but there are pairs in higher\ndimensions, the corresponding element(s) is/are filled with a $0 \\times 2$\nnumeric matrix.\n\n-   `metadata`: A list of length 6 containing information about how the data was\ncomputed:\n\n    -   `orderered_pairs`: A boolean indicating whether the pairs in the `pairs`\n    list are ordered (i.e. the first column is strictly less than the second\n    column).\n    -   `data`: The name of the object containing the original data on which the\n    persistence data was computed.\n    -   `engine`: The name of the package and the function of this package that\n    computed the persistence data in the form `\"package_name::package_function\"`.\n    -   `filtration`: The filtration used in the computation in a human-readable\n    format (i.e. full names, capitals where need, etc.).\n    -   `parameters`: A list of parameters used in the computation.\n    -   `call`: The exact call that generated the persistence data.\n\nCurrently, the following `S3` methods for objects of class `persistence` have\nbeen implemented:\n\n-   coercers from matrix, data.frame, objects of class 'diagram' as produced by\n`TDA::*Diag()` functions, objects of class 'PHom' as produced by\n`ripserr::vietoris_rips()` and objects of class\n'hclust' as produced by `stats::hclust()`;\n-   `format()` and `print()` which use the MIT-licensed\n[{cli}](https://cli.r-lib.org) package behind the scene for printing out to the\nconsole a nice colourful but brief summary of the persistence data;\n-   `get_pairs()` to extract homological features from a specific dimension;\n-   reverse coercers to go back to either matrix or data.frame representations.\n\nSome more details about how these coercers work can be found in the dedicated\n[vignette](https://tdaverse.github.io/phutil/articles/persistence-class.html) on\nthe website of the package.\n\nFor instance, one can start by some simulated point cloud using the\n[{tdaunif}](https://tdaverse.github.io/tdaunif/) package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_data <- tdaunif::sample_ellipse(n = 100L, ar = 2)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A sample of 100 points drawn uniformly on the contour of an ellispe.](index_files/figure-html/fig-point-data-1.png){#fig-point-data fig-align='center' width=672}\n:::\n:::\n\n\nA typical workflow would be to compute the persistence data from the point cloud\nshown in @fig-point-data using the\n[{TDA}](https://cran.r-project.org/web/packages/TDA/index.html) package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nph_data <- TDA::ripsDiag(\n    point_data,\n    maxdimension = 1L,\n    maxscale = 1.5\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Persistence data computed from the point cloud shown in @fig-point-data.](index_files/figure-html/fig-ph-data-1.png){#fig-ph-data fig-align='center' width=672}\n:::\n:::\n\n\nThe output that is displayed in @fig-ph-data is a list with a component\n`diagram` that contains the persistence data in the form of an aobject of class\n'diagram'. The latter is a 3-column matrix with the first column containing the\ndimension of the homological feature, the second column containing the birth\ntime and the third column containing the death time. The column names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(ph_data$diagram)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dimension\" \"Birth\"     \"Death\"    \n```\n:::\n:::\n\n\nmix lower and upper cases. Finally the object also has attributes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(attributes(ph_data$diagram))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dim\"          \"dimnames\"     \"class\"        \"maxdimension\" \"scale\"       \n[6] \"call\"        \n```\n:::\n:::\n\n\nthat store information about how the diagram has been computed. The\n`persistence` class can coerce the 'diagram' object into a 'persistence' object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(phutil)\nph_data_pers <- as_persistence(ph_data$diagram)\nph_data_pers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n── Persistence Data ────────────────────────────────────────────────────────────\nℹ There are 100 and 2 pairs in dimensions 0 and 1 respectively.\nℹ Computed from a Vietoris-Rips filtration using `TDA::ripsDiag()`.\nℹ With the following parameters: maxdimension = 1 and maxscale = 1.5.\n```\n:::\n:::\n\n\n### Distance computations using [Hera](https://github.com/anigmetov/hera)\n\nThe {phutil} package inlcudes functions to compute bottleneck and Wasserstein\ndistances either between two persistence diagrams or in a pairwise fashion from\na set of persistence diagrams. The underlying computation is actually performed\nvia the BSD-licensed [*Hera*](https://github.com/anigmetov/hera) C++ library.\nThe latter library is bundled within {phutil} which required a `LinkingTo`\ndependency on [{BH}](https://dirk.eddelbuettel.com/code/bh.html) for providing\naccess to the [*Boost*](https://www.boost.org) headers for Hera compilation. To\nthis end, the required Boost licensing terms have been copied over with the MIT\nlicense terms which {phutil} depends on. Specifically, the following functions\nare available:\n\n-   `bottleneck_distance()` and `wasserstein_distance()` compute the eponymous\ndistance between two diagrams;\n-   `bottleneck_pairwise_distances()` and `wasserstein_pairwise_distances()`\ncompute pairwise distances among a sample of persistence diagrams; these\nfunctions have their C++ code parallelized via [OpenMP](https://www.openmp.org);\nto that end, they gain an optional `ncores` argument which is `1L` by default.\n\nFor example, {phutil} has a built-in set of 100 persistence diagrams computed on\n100 noisy versions of points on the 2-sphere. The diagrams are stored in the\nobject\n[`persistence_sample`](https://tdaverse.github.io/phutil/reference/persistence_sample.html).\nThe following code computes the pairwise bottleneck distances between the first\n7 diagrams in the set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottleneck_pairwise_distances(\n    persistence_sample[1L:7L],\n    ncores = 2L\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           1          2          3          4          5          6\n2 0.06197453                                                       \n3 0.06182617 0.03393206                                            \n4 0.08125193 0.05359485 0.04198256                                 \n5 0.04190589 0.06276444 0.06261608 0.08065585                      \n6 0.02829251 0.05512256 0.05588969 0.09325840 0.03326582           \n7 0.11170465 0.07960792 0.06338179 0.06507459 0.11249456 0.11927148\n```\n:::\n:::\n\n\n## A stable, modular, extensible package collection\n\nWe are part of a loose-knit team of R developers interested in fostering a more\nsustainable and convenient package collection for TDA, which we've come to call\nthe [TDAverse](https://github.com/tdaverse). The collection ranges from\nlow-level, general-purpose packages like {tdaunif} and now {phutil}, through\npurpose-fit but interoperable packages like {ripserr} and {plt}, to Tidyverse\nextensions like {ggtda} and the forthcoming {tdarec}.\n\n![](aymeric.jpg){width=40%}\n![](Jason_Cory_Brunson.jpg){width=42%}\n\nDevelopment of {phutil} was directly funded by an Infrastructure Steering\nCommittee grant from the R Consortium, together with several other packages that\nwill be presented in upcoming blog posts. While we hope to secure funding for\nother specific projects in future, we also invite interested developers or users\nto reach out with their issues or ideas.\n\n## References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}